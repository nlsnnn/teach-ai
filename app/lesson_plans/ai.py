import requests
from django.conf import settings

from .schemas import AIPlanRequest


class IOAi:
    PROMPT = """
Ты — опытный педагог-методист и автор учебных пособий. Создай подробный, структурированный и практический план для школьного учителя на основе вводных данных.

**ИСХОДНЫЕ ДАННЫЕ:**
*   **Класс (название/литера):** {class_name}
*   **Предмет:** {subject}
*   **Средний возраст учащихся:** {age}
*   **Тема изучения:** {topic}
*   **Количество часов/уроков на тему:** {hours}
*   **Пожелания учителя (опционально):** {preferences}

---

**ИНСТРУКЦИЯ ДЛЯ ТЕБЯ:**

1.  **Проанализируй количество часов.** От этого зависит структура твоего ответа:
    *   **Если указан 1 час:** Создай **детальный план одного урока** с пошаговым таймингом.
    *   **Если указано 2 часа и более:** Создай **тематический блок (серию уроков)** с общей концепцией и краткими планами для каждого урока в рамках блока.

2.  **Структура ответа:** Строго следуй структуре, указанной ниже в разделе "ФОРМАТ ОТВЕТА". Используй чёткие заголовки `##`.

3.  **Язык и тон:** Пиши профессионально, но понятно для учителя. Предлагай конкретные, выполнимые в классе действия.

---

**ФОРМАТ ОТВЕТА**

## 1. Общая информация
*   **Тема:** {topic}
*   **Класс:** {class_name}
*   **Предмет:** {subject}
*   **Количество часов:** {hours}

## 2. Цели и результаты
*   **Образовательная цель:** (Чему научатся ученики в рамках всей темы?)
*   **Развивающая цель:** (Какие навыки (анализ, работа в команде и т.д.) разовьют?)
*   **Воспитательная цель:** (Какие ценности и качества будут воспитываться?)
*   **Планируемые результаты (УУД):** (Кратко перечисли личностные, метапредметные и предметные результаты).

## 3. Оборудование и ресурсы
*   (Перечисли всё необходимое: учебники, карты, раздаточные материалы, проектор и т.д.)

## 4. Содержание и деятельность

### ЕСЛИ КОЛИЧЕСТВО ЧАСОВ = 1:

**План урока (45 минут)**

*   **I. Организационный момент (1-2 мин)**
    *   (Приветствие, настрой на работу)

*   **II. Актуализация знаний (5-7 мин)**
    *   (Методы: опрос, мозговой штурм, проблемный вопрос. Конкретные формулировки вопросов)

*   **III. Изучение нового материала (15-20 мин)**
    *   (Разбей на логические части. Опиши деятельность учителя и учеников, методы подачи информации)

*   **IV. Закрепление нового материала (10-12 мин)**
    *   (Практическое задание: групповая работа, упражнение в тетради, работа с картой и т.д. Учти пожелания учителя)

*   **V. Рефлексия и подведение итогов (3-5 мин)**
    *   (Вопросы для рефлексии, краткое резюме учителя)

### ЕСЛИ КОЛИЧЕСТВО ЧАСОВ >= 2:

**Планирование по урокам**

*   **Урок 1: [Название первого урока, напр.: "Введение в тему..."]**
    *   **Цель урока:** (Конкретная цель этого урока)
    *   **Основное содержание и деятельность:** (Краткое описание этапов урока и ключевых активностей, 4-5 пунктов)

*   **Урок 2: [Название второго урока, напр.: "Основные понятия и их анализ"]**
    *   **Цель урока:** ...
    *   **Основное содержание и деятельность:** ... (Обязательно включи активность из "Пожеланий" учителя)

*   **Урок Кол-во часов: [Название итогового урока, напр.: "Обобщение и контроль"]**
    *   **Цель урока:** ...
    *   **Основное содержание и деятельность:** ...

## 5. Домашнее задание
*   (Сформулируйте четкое задание. Если часов больше одного, укажите домашнее задание к последнему уроку или для всего блока.)

---

**КОНЕЦ ПРОМПТА. Начни генерацию.**
    """

    def __init__(self):
        self.base_url = settings.AI_BASE_URL
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {settings.AI_KEY}",
        }


    def get_ai_plan(self, data: AIPlanRequest):
        url = self.base_url + "/chat/completions"
        response = requests.post(
            url=url, headers=self.headers, json=self._get_data(data)
        )
        response.raise_for_status()

        result = response.json()
        answer: str = result["choices"][0]["message"]["content"]
        return answer

    @classmethod
    def _get_data(cls, data: AIPlanRequest):
        return {
            "model": settings.AI_MODEL,
            "messages": [
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": cls.PROMPT.format(
                    class_name=data.class_name,
                    subject=data.subject,
                    age=data.age,
                    topic=data.topic,
                    hours=data.hours,
                    preferences=data.preferences
                )},
            ],
        }