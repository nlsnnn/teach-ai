Project Structure:
./poetry.lock
./pyproject.toml
app/manage.py
app/lesson_plans/tests.py
app/lesson_plans/views.py
app/lesson_plans/apps.py
app/lesson_plans/admin.py
app/lesson_plans/models.py
app/lesson_plans/urls.py
app/lesson_plans/migrations/0001_initial.py
app/users/tests.py
app/users/views.py
app/users/apps.py
app/users/admin.py
app/users/models.py
app/users/forms.py
app/users/urls.py
app/users/migrations/0001_initial.py
app/users/templates/users/login.html
app/users/templates/users/register.html
app/templates/home.html
app/templates/base.html
app/app/asgi.py
app/app/wsgi.py
app/app/settings.py
app/app/urls.py

File Contents:
poetry.lock:
```
# This file is automatically @generated by Poetry 2.2.0 and should not be changed by hand.

[[package]]
name = "asgiref"
version = "3.9.1"
description = "ASGI specs, helper code, and adapters"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "asgiref-3.9.1-py3-none-any.whl", hash = "sha256:f3bba7092a48005b5f5bacd747d36ee4a5a61f4a269a6df590b43144355ebd2c"},
    {file = "asgiref-3.9.1.tar.gz", hash = "sha256:a5ab6582236218e5ef1648f242fd9f10626cfd4de8dc377db215d5d5098e3142"},
]

[package.extras]
tests = ["mypy (>=1.14.0)", "pytest", "pytest-asyncio"]

[[package]]
name = "django"
version = "5.2.6"
description = "A high-level Python web framework that encourages rapid development and clean, pragmatic design."
optional = false
python-versions = ">=3.10"
groups = ["main"]
files = [
    {file = "django-5.2.6-py3-none-any.whl", hash = "sha256:60549579b1174a304b77e24a93d8d9fafe6b6c03ac16311f3e25918ea5a20058"},
    {file = "django-5.2.6.tar.gz", hash = "sha256:da5e00372763193d73cecbf71084a3848458cecf4cee36b9a1e8d318d114a87b"},
]

[package.dependencies]
asgiref = ">=3.8.1"
sqlparse = ">=0.3.1"
tzdata = {version = "*", markers = "sys_platform == \"win32\""}

[package.extras]
argon2 = ["argon2-cffi (>=19.1.0)"]
bcrypt = ["bcrypt"]

[[package]]
name = "sqlparse"
version = "0.5.3"
description = "A non-validating SQL parser."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "sqlparse-0.5.3-py3-none-any.whl", hash = "sha256:cf2196ed3418f3ba5de6af7e82c694a9fbdbfecccdfc72e281548517081f16ca"},
    {file = "sqlparse-0.5.3.tar.gz", hash = "sha256:09f67787f56a0b16ecdbde1bfc7f5d9c3371ca683cfeaa8e6ff60b4807ec9272"},
]

[package.extras]
dev = ["build", "hatch"]
doc = ["sphinx"]

[[package]]
name = "tzdata"
version = "2025.2"
description = "Provider of IANA time zone data"
optional = false
python-versions = ">=2"
groups = ["main"]
markers = "sys_platform == \"win32\""
files = [
    {file = "tzdata-2025.2-py2.py3-none-any.whl", hash = "sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8"},
    {file = "tzdata-2025.2.tar.gz", hash = "sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9"},
]

[metadata]
lock-version = "2.1"
python-versions = ">=3.11,<4.0"
content-hash = "559503cfc6d29a5f363ac8669fa357d289e7fc7160f365ad2ea45aac1e4ad83c"

```

pyproject.toml:
```
[tool.poetry]
name = "teach-ai"
version = "0.1.0"
authors = ["nlsnnn <egor.larrr@gmail.com>"]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
django = "^5.2.6"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

```

manage.py:
```
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

tests.py:
```
from django.test import TestCase

# Create your tests here.

```

views.py:
```
from django.shortcuts import render



```

apps.py:
```
from django.apps import AppConfig


class LessonPlansConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'lesson_plans'

```

admin.py:
```
from django.contrib import admin

# Register your models here.

```

models.py:
```
from django.db import models
from users.models import User


class StudyClass(models.Model):
    teacher = models.ForeignKey(to=User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100, verbose_name="Название класса")
    subject = models.CharField(max_length=200, verbose_name="Предмет")
    age_group = models.PositiveIntegerField(verbose_name="Средний возраст учеников")

    def __str__(self):
        return f"{self.name} ({self.subject})"


class LessonPlan(models.Model):
    topic = models.CharField(max_length=255, verbose_name="Тема урока")
    hours = models.PositiveIntegerField(default=1, verbose_name="Кол-во часов/уроков")
    preferences = models.TextField(null=True, blank=True, verbose_name="Пожелания")

    generated_text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    pdf_file = models.FileField(upload_to="lesson_plans/pdf/", blank=True, null=True)
    docx_file = models.FileField(upload_to="lesson_plans/docx/", blank=True, null=True)

    user = models.ForeignKey(to=User, on_delete=models.CASCADE, related_name="lesson_plans")
    study_class = models.ForeignKey(to=StudyClass, on_delete=models.CASCADE, related_name="lesson_plans")

    def __str__(self):
        return f"План: {self.topic} ({self.study_class})"

```

urls.py:
```
urlpatterns = [
    
]
```

0001_initial.py:
```
# Generated by Django 5.2.6 on 2025-09-22 09:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StudyClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название класса')),
                ('subject', models.CharField(max_length=200, verbose_name='Предмет')),
                ('age_group', models.PositiveIntegerField(verbose_name='Средний возраст учеников')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LessonPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=255, verbose_name='Тема урока')),
                ('hours', models.PositiveIntegerField(default=1, verbose_name='Кол-во часов/уроков')),
                ('preferences', models.TextField(blank=True, null=True, verbose_name='Пожелания')),
                ('generated_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='lesson_plans/pdf/')),
                ('docx_file', models.FileField(blank=True, null=True, upload_to='lesson_plans/docx/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_plans', to=settings.AUTH_USER_MODEL)),
                ('study_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_plans', to='lesson_plans.studyclass')),
            ],
        ),
    ]

```

tests.py:
```
from django.test import TestCase

# Create your tests here.

```

views.py:
```
from django.contrib.auth.views import LoginView, LogoutView
from django.views.generic import CreateView
from django.urls import reverse_lazy
from .forms import CustomUserCreationForm, CustomAuthenticationForm


class UserRegisterView(CreateView):
    form_class = CustomUserCreationForm
    template_name = "users/register.html"
    success_url = reverse_lazy("home")


class UserLoginView(LoginView):
    form_class = CustomAuthenticationForm
    template_name = "users/login.html"

    def get_success_url(self):
        return reverse_lazy("home")

```

apps.py:
```
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

```

admin.py:
```
from django.contrib import admin

# Register your models here.

```

models.py:
```
from django.db import models
from django.contrib.auth.models import AbstractUser


class User(AbstractUser):
    ROLE_CHOICES = (
        ("teacher", "Учитель"),
        ("admin", "Админ"),
    )
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='teacher')

    def __str__(self):
        return f"{self.username} ({self.get_role_display()})"

```

forms.py:
```
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import User


class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = User
        fields = ["username", "email", "first_name", "last_name", "password1", "password2"]
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            field.widget.attrs.update({
                'class': 'mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500'
            })


class CustomAuthenticationForm(AuthenticationForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            field.widget.attrs.update({
                'class': 'mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500'
            })

```

urls.py:
```
from django.urls import path
from . import views


urlpatterns = [
    path("register/", views.UserRegisterView.as_view(), name="register"),
    path("login/", views.UserLoginView.as_view(), name="login"),
    path("logout/", views.LogoutView.as_view(), name="logout"),
]

```

0001_initial.py:
```
# Generated by Django 5.2.6 on 2025-09-22 09:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('teacher', 'Учитель'), ('admin', 'Админ')], default='teacher', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

```

login.html:
```
{% extends 'base.html' %}

{% block title %}Вход{% endblock %}

{% block content %}
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <a href="{% url 'home' %}" class="flex justify-center">
                <div class="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">
                    <span class="text-white font-bold">T</span>
                </div>
            </a>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Войдите в аккаунт
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Или 
                <a href="{% url 'users:register' %}" class="font-medium text-primary-600 hover:text-primary-500">
                    зарегистрируйтесь
                </a>
            </p>
        </div>
        
        <form class="mt-8 space-y-6" method="post">
            {% csrf_token %}
            
            {% if form.errors %}
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <p class="text-red-800 text-sm">Неверные учетные данные.</p>
                </div>
            {% endif %}
            
            <div class="space-y-4">
                {% for field in form %}
                    <div>
                        <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700">
                            {{ field.label }}
                        </label>
                        {{ field }}
                    </div>
                {% endfor %}
            </div>

            <div>
                <button type="submit"
                        class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-500 hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition">
                    Войти
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}
```

register.html:
```
{% extends 'base.html' %}

{% block title %}Регистрация{% endblock %}

{% block content %}
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <a href="{% url 'home' %}" class="flex justify-center">
                <div class="w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">
                    <span class="text-white font-bold">T</span>
                </div>
            </a>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Создайте аккаунт
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Или 
                <a href="{% url 'users:login' %}" class="font-medium text-primary-600 hover:text-primary-500">
                    войдите в существующий
                </a>
            </p>
        </div>
        
        <form class="mt-8 space-y-6" method="post">
            {% csrf_token %}
            
            {% if form.errors %}
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <p class="text-red-800 text-sm">Пожалуйста, исправьте ошибки ниже.</p>
                    {% for field in form %}
                        {% for error in field.errors %}
                            <p class="text-red-600 text-sm mt-1">{{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                    {% for error in form.non_field_errors %}
                        <p class="text-red-600 text-sm mt-1">{{ error }}</p>
                    {% endfor %}
                </div>
            {% endif %}
            
            <div class="space-y-4">
                {% for field in form %}
                    <div>
                        <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700">
                            {{ field.label }}
                        </label>
                        {{ field }}
                        {% if field.help_text %}
                            <p class="mt-1 text-sm text-gray-500">{{ field.help_text }}</p>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>

            <div>
                <button type="submit"
                        class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-500 hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition">
                    Зарегистрироваться
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}
```

home.html:
```
{% extends 'base.html' %} 

{% block title %}Главная{% endblock %} 

{% block content %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <div class="text-center mb-16">
    <h1 class="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
      Современный помощник
      <span
        class="bg-gradient-to-r from-primary-600 to-secondary-600 bg-clip-text text-transparent"
      >
        для учителей
      </span>
    </h1>
    <p class="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
      Создавайте увлекательные планы уроков с помощью искусственного интеллекта.
      Экономьте время и вдохновляйте своих учеников.
    </p>

    {% if user.is_authenticated %}
    <a
      href="{% url 'lessons:studyclass_list' %}"
      class="bg-primary-500 text-white px-8 py-3 rounded-lg text-lg font-semibold hover:bg-primary-600 transition inline-block"
    >
      Перейти к классам
    </a>
    {% else %}
    <div class="space-x-4">
      <a
        href="{% url 'users:register' %}"
        class="bg-primary-500 text-white px-8 py-3 rounded-lg text-lg font-semibold hover:bg-primary-600 transition inline-block"
      >
        Начать бесплатно
      </a>
      <a
        href="{% url 'users:login' %}"
        class="border border-primary-500 text-primary-500 px-8 py-3 rounded-lg text-lg font-semibold hover:bg-primary-50 transition inline-block"
      >
        Войти
      </a>
    </div>
    {% endif %}
  </div>

  <div class="grid md:grid-cols-3 gap-8 mb-16">
    <div class="text-center p-6">
      <div
        class="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <svg
          class="w-8 h-8 text-primary-600"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
          ></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold mb-2">Умные планы уроков</h3>
      <p class="text-gray-600">
        AI-генерация планов по вашим требованиям и предпочтениям
      </p>
    </div>

    <div class="text-center p-6">
      <div
        class="w-16 h-16 bg-secondary-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <svg
          class="w-8 h-8 text-secondary-600"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
          ></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold mb-2">Управление классами</h3>
      <p class="text-gray-600">
        Создавайте и редактируйте классы для разных предметов
      </p>
    </div>

    <div class="text-center p-6">
      <div
        class="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4"
      >
        <svg
          class="w-8 h-8 text-primary-600"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          ></path>
        </svg>
      </div>
      <h3 class="text-xl font-semibold mb-2">Экспорт в PDF/DOCX</h3>
      <p class="text-gray-600">Скачивайте готовые планы в удобном формате</p>
    </div>
  </div>
</div>
{% endblock %}

```

base.html:
```
<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{% block title %}TeachAI{% endblock %}</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: {
                50: "#fef6ee",
                100: "#fdead7",
                200: "#fbd0ae",
                300: "#f8af7b",
                400: "#f48344",
                500: "#f15e1e",
                600: "#e24414",
                700: "#bc3213",
                800: "#962917",
                900: "#792416",
              },
              secondary: {
                50: "#f0fdf4",
                100: "#dcfce7",
                200: "#bbf7d0",
                300: "#86efac",
                400: "#4ade80",
                500: "#22c55e",
                600: "#16a34a",
                700: "#15803d",
                800: "#166534",
                900: "#14532d",
              },
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <nav class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <a href="{% url 'home' %}" class="flex items-center space-x-2">
              <div
                class="w-8 h-8 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center"
              >
                <span class="text-white font-bold text-sm">T</span>
              </div>
              <span class="text-xl font-bold text-gray-900">TeachAI</span>
            </a>
          </div>

          <div class="flex items-center space-x-4">
            {% if user.is_authenticated %}
            <span class="text-gray-700"
              >Добро пожаловать, {{ user.first_name|default:user.username
              }}</span
            >
            <a
              href="{% url 'users:logout' %}"
              class="text-gray-600 hover:text-primary-600 transition"
              >Выйти</a
            >
            {% else %}
            <a
              href="{% url 'users:login' %}"
              class="text-gray-600 hover:text-primary-600 transition"
              >Войти</a
            >
            <a
              href="{% url 'users:register' %}"
              class="bg-primary-500 text-white px-4 py-2 rounded-lg hover:bg-primary-600 transition"
              >Регистрация</a
            >
            {% endif %}
          </div>
        </div>
      </div>
    </nav>

    <main>{% block content %} {% endblock %}</main>

    <footer class="bg-white border-t mt-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="text-center text-gray-600">
          <p>&copy; 2025 TeachAI. Помощник для современных учителей.</p>
        </div>
      </div>
    </footer>
  </body>
</html>

```

asgi.py:
```
"""
ASGI config for app project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')

application = get_asgi_application()

```

wsgi.py:
```
"""
WSGI config for app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')

application = get_wsgi_application()

```

settings.py:
```
"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x8u87cz6(b(u%)4!)5b%8ic=!clzveg@e6$nh+*555e*1@bn)o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'lesson_plans',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates",
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "users.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
LOGIN_URL = 'users:login'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

```

urls.py:
```
"""
URL configuration for app project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView


urlpatterns = [
    path("admin/", admin.site.urls),
    path("auth/", include(("users.urls", "users"), namespace="users")),
    path("lesson/", include(("lesson_plans.urls", "lesson_plans"), namespace="lessons")),
    path("", TemplateView.as_view(template_name="home.html"), name="home"),  # Добавляем главную страницу

]

```
